package com.cdiscount.fileparser;
import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;


public class MajesticFileParser {
    
	private static String insert_string ="INSERT INTO MAJESTIC_CISCOUNT_CSV_EXPORT(TARGET_URL,SOURCE_URL,ANCHOR_TEXT,FIRST_FOUND_DATE,FLAG_NO_FOLLOW,FLAG_IMAGE_LINK,FLAG_REDIRECT,FLAG_FRAME,FLAG_OLD_CRAWL,FLAG_ALT_TEXT,FALG_MENTION,SOURCE_CITATIONFLOW,SOURCE_TRUSTFLOW,TARGET_CITATIONFLOW,TARGET_TRUSTFLOW,SOURCE_TOPICAL_TRUSTFLOW_TOPIC_0,SOURCE_TOPICAL_TRUSTFLOW_VALUE_0) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
    
	
	
//			+ " VALUES(?,?,?,?)";
//	CREATE TABLE IF NOT MAJESTIC_CISCOUNT_CSV_EXPORT (
//		    TARGET_URL TEXT, 
//		    SOURCE_URL TEXT,
//		    ANCHOR_TEXT TEXT,
//		    FIRST_FOUND_DATE DATE,
//		    FLAG_NO_FOLLOW BOOLEAN,
//		    FLAG_IMAGE_LINK BOOLEAN,
//		    FLAG_REDIRECT BOOLEAN,
//		    FLAG_FRAME BOOLEAN,
//		    FLAG_OLD_CRAWL BOOLEAN,
//		    FLAG_ALT_TEXT BOOLEAN,
//		    FALG_MENTION BOOLEAN,
//		    SOURCE_CITATIONFLOW INT,
//		    SOURCE_TRUSTFLOW INT,
//		    TARGET_CITATIONFLOW INT,
//		    TARGET_TRUSTFLOW INT,
//		    SOURCE_TOPICAL_TRUSTFLOW_TOPIC_0 INT,
//		    SOURCE_TOPICAL_TRUSTFLOW_VALUE_0 INT)
	public static void main(String[] args) throws IOException {
		// Reading the property of our database
		Properties props = new Properties();
		FileInputStream in = null;      
		try {
			in = new FileInputStream("database.properties");
			props.load(in);
		} catch (IOException ex) {
			Logger lgr = Logger.getLogger(MajesticFileParser.class.getName());
			lgr.log(Level.SEVERE, ex.getMessage(), ex);

		} finally {
			try {
				if (in != null) {
					in.close();
				}
			} catch (IOException ex) {
				Logger lgr = Logger.getLogger(MajesticFileParser.class.getName());
				lgr.log(Level.SEVERE, ex.getMessage(), ex);
			}
		}

		// the following properties have been identified
		String url = props.getProperty("db.url");
		String user = props.getProperty("db.user");
		String passwd = props.getProperty("db.passwd");

		// FNAC_file
        //String csvFile = "D:\\My_FNAC_entering_links\\download_fnac_com_16_Jul_14_E832D435DA56AC2656CDF3E3E4C4E1E4.csv";
        // CDS file extracted from MAJESTIC
		// windows path
		//String csvFile = "D:\\My_Link_Data\\test-neo4j.csv";
		String csvFile = "/home/sduprey/My_Data/My_Toxic_Links/cdiscount.csv";

		Connection con = null;
		PreparedStatement pst = null;
		// the csv file variables
		ResultSet rs = null;
		BufferedReader br = null;
		String line = "";
		String header = null;
		String[] column_names = null;
		String cvsSplitBy = ",";
		int nb_line=1;
		// last error
		try {
			con = DriverManager.getConnection(url, user, passwd);
			br = new BufferedReader(
					new InputStreamReader(
							new FileInputStream(csvFile), "UTF8"));
			// we skip the first line : the headers
			header = br.readLine();
			column_names= header.split(cvsSplitBy);
			while ((line = br.readLine()) != null) {
				// System.out.println(line);
				// use comma as separator
				String[] splitted_line = line.split(cvsSplitBy);
				// keeping only : Target URL,Source URL,Anchor Text,Source Crawl Date,Source First Found Date,FlagNoFollow,FlagImageLink,FlagRedirect,
				//                column_names[0], column_names[1], column_names[2], column_names[4]

				System.out.println("Inserting line number :"+nb_line);
				//Charset charset = Charset.forName("UTF-8");
               // String anchorText = charset.encode(splitted_line[2]).toString();
				//String anchorText = removeBadChars(splitted_line[2]);	
				String anchorText = splitted_line[2].replace("\0", "");
				System.out.println(column_names[0]+" : "+splitted_line[0]);
				System.out.println(column_names[1]+" : "+splitted_line[1]);
				System.out.println(column_names[2]+" : "+anchorText);
				System.out.println(column_names[3]+" : "+splitted_line[3]);
				System.out.println(column_names[4]+" : "+splitted_line[4]);
				System.out.println(column_names[5]+" : "+splitted_line[5]);
				System.out.println(column_names[6]+" : "+splitted_line[6]);
				System.out.println(column_names[7]+" : "+splitted_line[7]);
				System.out.println(column_names[8]+" : "+splitted_line[8]);
				System.out.println(column_names[9]+" : "+splitted_line[9]);
				System.out.println(column_names[10]+" : "+splitted_line[10]);
				System.out.println(column_names[11]+" : "+splitted_line[11]);
				System.out.println(column_names[12]+" : "+splitted_line[12]);
				System.out.println(column_names[13]+" : "+splitted_line[13]);
				System.out.println(column_names[14]+" : "+splitted_line[14]);
				System.out.println(column_names[15]+" : "+splitted_line[15]);
				System.out.println(column_names[16]+" : "+splitted_line[16]);
				System.out.println(column_names[17]+" : "+splitted_line[17]);
				System.out.println(column_names[18]+" : "+splitted_line[18]);
				System.out.println(column_names[19]+" : "+splitted_line[19]);
				System.out.println(column_names[20]+" : "+splitted_line[20]);

				// INSERT INTO FNAC table
////				String stm = "INSERT INTO ENTERING_LINKS(TARGET_URL,SOURCE_URL,ANCHOR_TEXT,FIRST_FOUND_DATE)"
////						+ " VALUES(?,?,?,?)";
//				String stm = "INSERT INTO CDS_ENTERING_LINKS(TARGET_URL,SOURCE_URL,ANCHOR_TEXT,FIRST_FOUND_DATE)"
//						+ " VALUES(?,?,?,?)";
//
				pst = con.prepareStatement(insert_string);
				pst.setString(1,splitted_line[0]);
				pst.setString(2,splitted_line[1]);
				pst.setString(3,anchorText);
				pst.setString(4,splitted_line[3]);
				pst.setString(5,splitted_line[4]);
				pst.setString(6,splitted_line[5]);
				pst.setString(7,splitted_line[6]);
				pst.setString(8,splitted_line[7]);
				pst.setString(9,splitted_line[8]);
				pst.setString(10,splitted_line[9]);
				pst.setString(11,splitted_line[10]);
				pst.setString(12,splitted_line[11]);
				pst.setString(13,splitted_line[12]);
				pst.setString(14,splitted_line[13]);
				pst.setString(15,splitted_line[14]);
				pst.setString(16,splitted_line[15]);
				pst.setString(17,splitted_line[16]);
		
//				SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd"); 
//				Date  date = sdf.parse(splitted_line[4]);
//				java.sql.Date sqlDate = new java.sql.Date(date.getTime());
//
//				pst.setDate(4,sqlDate);
//				try {
//					pst.executeUpdate();
//				} catch (Exception exx) {
//					exx.printStackTrace();
//				}
				nb_line++;
			}

		} catch (Exception ex) {
			ex.printStackTrace();
		}finally{

			if (br != null) {
				try {
					br.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
	}

	public static String removeBadChars(String s) {
		if (s == null) return null;
		StringBuilder sb = new StringBuilder();
		for(int i=0;i<s.length();i++){ 
			if (Character.isHighSurrogate(s.charAt(i)) ) continue;	
			sb.append(s.charAt(i));
		}
		return sb.toString();
	}
}
