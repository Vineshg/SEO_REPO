package vsm;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

public class InsideMagasinSimilarityWorkerThread implements Runnable {
	private static String insert_statement="INSERT INTO MAGASIN_SIMILARITIES (MAGASIN, CONTENT, RAYONS, EXACT_COUNT, COUPLES, LAST_UPDATE) VALUES (?,?,?,?,?,?)";
	private String magasin;
	private Map<String,List<URLContentInfo>> magasins_duplicates = new HashMap<String,List<URLContentInfo>>();
	private List<URLContentInfo> magasin_infos = new ArrayList<URLContentInfo>();
	private String field_to_fetch;
	private Connection con;
	private double threshold = 0.8;

	public InsideMagasinSimilarityWorkerThread(Connection con, String magasin, String field_to_fetch) throws SQLException{
		this.magasin=magasin;
		//this.rayons=rayons;
		this.field_to_fetch=field_to_fetch;
		System.out.println("Computing metrics for field : "+ this.field_to_fetch +" and for "+magasin +" :"+ this.magasin);
		this.con = con;

		System.out.println("Getting content from magasin :"+this.magasin);
		//			List<URLContentInfo> info_list = rayons_datas.get(rayon);
		//			if (info_list==null){
		//				info_list=new ArrayList<URLContentInfo>();
		//				rayons_datas.put(rayon,info_list);
		//			}	
		// getting the URLs infos for each rayon
		PreparedStatement field_pst;
		try {
			field_pst  = this.con.prepareStatement("SELECT "+this.field_to_fetch+" , URL, VENDOR, MAGASIN, RAYON, PRODUIT FROM CRAWL_RESULTS WHERE MAGASIN='" +magasin+ "'");
			ResultSet field_rs = field_pst.executeQuery();
			while (field_rs.next()) {
				URLContentInfo url_info = new URLContentInfo();
				String content = field_rs.getString(1);
				String my_url = field_rs.getString(2);
				String my_vendor = field_rs.getString(3);
				String my_magasin = field_rs.getString(4);
				String my_rayon = field_rs.getString(5);
				String my_produit = field_rs.getString(6);
				url_info.setContent(content);
				url_info.setUrl(my_url);
				url_info.setMagasin(my_magasin);
				url_info.setRayon(my_rayon);
				url_info.setProduit(my_produit);
				url_info.setVendor(my_vendor);
				magasin_infos.add(url_info);
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			System.out.println("Database trouble with the magasin :"+this.magasin);
			e.printStackTrace();
		}

	}

	public void run() {

		for (URLContentInfo info : magasin_infos){
			String content = info.getContent();
			List<URLContentInfo> content_aggregation = magasins_duplicates.get(content);
			if (content_aggregation == null){
				content_aggregation=new ArrayList<URLContentInfo>();
				magasins_duplicates.put(content, content_aggregation);
			}
			content_aggregation.add(info);			
		}

		save_results_database();

		//		for (String rayon1 : rayons){
		//			for (String rayon2 : rayons){
		//				System.out.println("Computing similarity metrics for rayons : "+ rayon1 + " and "+ rayon2);
		//				RayonComparison tosave = buildComparisonMatrix(rayon1,rayon2);
		//				save_database(tosave);
		//			}	
		//		}
		//		System.out.println(Thread.currentThread().getName()+" End");
	}
	//
	//	private RayonComparison buildComparisonMatrix(String rayoni, String rayonj){
	//		System.out.println("Computing similarity metrics between rayons : "+rayoni+"/"+rayonj);
	//		List<URLContentInfo> info_i = rayons_datas.get(rayoni);
	//		List<URLContentInfo> info_j = rayons_datas.get(rayonj);
	//		RayonComparison comp =cross_lists(info_i,info_j);
	//		comp.setRayoni(rayoni);
	//		comp.setRayonj(rayonj);		
	//		System.out.println("First rayon size : " + comp.getRayon_i_size());
	//		System.out.println("Second rayon size : " + comp.getRayon_j_size());
	//		System.out.println("Percentage of exactly matching : " +comp.getPercent_exactly_matching());
	//		System.out.println("Average similarity : " + comp.getAverage_similarity());
	//		return comp;
	//	}
	//	private RayonComparison cross_lists(List<URLContentInfo> infos_i,List<URLContentInfo> infos_j){
	//		int total_exact_number=0;
	//		double total_sum = 0;
	//		int rayon_i_size = infos_i.size();
	//		int rayon_j_size = infos_j.size();
	//		List<RayonLevelDoublon> inbetweendoublons = new ArrayList<RayonLevelDoublon>();
	//		for (int k=0;k<rayon_i_size;k++){
	//			URLContentInfo infok=infos_i.get(k);
	//			String urlk=infok.getUrl();
	//			int indexk = urlk.indexOf("?");
	//			if (indexk>=0){
	//				urlk=urlk.substring(0, indexk);
	//			}
	//			String contentk =infok.getContent() == null ? "" : infok.getContent();
	//			for (int l=0;l<rayon_j_size;l++){
	//				URLContentInfo infol=infos_j.get(l);
	//				String urll= infol.getUrl();
	//				int indexl = urll.indexOf("?");
	//				if (indexl>=0){
	//					urll=urll.substring(0, indexl);
	//				}
	//				String contentl =infol.getContent() == null ? "" : infol.getContent();
	//				if (!(urll.equals(urlk))){
	//					double similarity = 0;
	//					boolean isexactlysimilar = contentk.equals(contentl);
	//					if ("".equals(contentk) || "".equals(contentl)){
	//						if (isexactlysimilar){
	//							similarity=1;
	//						}
	//					} else {
	//						similarity = computeSimilarity(contentk,contentl);
	//					}
	//					if (isexactlysimilar){
	//						total_exact_number++;
	//						RayonLevelDoublon doublon = new RayonLevelDoublon();
	//						doublon.setURL1(infok.getUrl());
	//						doublon.setURL2(infol.getUrl());
	//						doublon.setIsexact(true);
	//						doublon.setSimilarity(similarity);
	//						inbetweendoublons.add(doublon);
	//					}
	//					total_sum=total_sum+similarity;
	//					if(similarity>=threshold && !isexactlysimilar){
	//						RayonLevelDoublon doublon = new RayonLevelDoublon();
	//						doublon.setURL1(infok.getUrl());
	//						doublon.setURL2(infol.getUrl());
	//						doublon.setIsexact(false);
	//						doublon.setSimilarity(similarity);
	//						inbetweendoublons.add(doublon);
	//					}
	//				}
	//			}
	//		}
	//		RayonComparison comp = new RayonComparison();
	//		comp.setRayon_i_size(rayon_i_size);
	//		comp.setRayon_j_size(rayon_j_size);
	//		comp.setPercent_exactly_matching( ((double)total_exact_number)/(rayon_i_size*rayon_j_size));
	//		comp.setAverage_similarity((total_sum)/(rayon_i_size*rayon_j_size));
	//		comp.setDoublons(inbetweendoublons);
	//		return comp;
	//	}
	//
	//	private Double computeSimilarity(String text1, String text2) {
	//		VectorStateSpringRepresentation vs1 =new VectorStateSpringRepresentation(text1);
	//		VectorStateSpringRepresentation vs2 =new VectorStateSpringRepresentation(text2);
	//		return cosine_similarity(vs1.getWordFrequencies() , vs2.getWordFrequencies());
	//	}
	//
	//	private double cosine_similarity(Map<String, Integer> v1, Map<String, Integer> v2) {
	//		Set<String> both = new HashSet<String>(v1.keySet());
	//		both.retainAll(v2.keySet());
	//		double sclar = 0, norm1 = 0, norm2 = 0;
	//		for (String k : both) sclar += v1.get(k) * v2.get(k);
	//		for (String k : v1.keySet()) norm1 += v1.get(k) * v1.get(k);
	//		for (String k : v2.keySet()) norm2 += v2.get(k) * v2.get(k);
	//		return sclar / Math.sqrt(norm1 * norm2);
	//	}


	private void save_results_database(){
		// we here loop over all our fields

		System.out.println("Displaying arguments counting results \n");
		Iterator it = magasins_duplicates.entrySet().iterator();
		while (it.hasNext()) {
			Map.Entry pairs = (Map.Entry)it.next();
			String content=(String)pairs.getKey();
			List<URLContentInfo> content_infos = (List<URLContentInfo>)pairs.getValue();
			int nb_exact_urls = content_infos.size();
			if ((!(content == null))&& nb_exact_urls > 1){ 
				Set<String> rayon_set = new HashSet<String>();
				Set<String> url_set = new HashSet<String>();
				for (URLContentInfo content_info:content_infos){
					url_set.add(content_info.getUrl());
					rayon_set.add(content_info.getRayon());
				}
				StringBuilder duplicates_aggregator = new StringBuilder();
				for (String local_url : url_set) {
					duplicates_aggregator.append(local_url+";");
				}
				String duplicates_urls = duplicates_aggregator.toString();
				StringBuilder rayons_aggregator = new StringBuilder();
				for (String rayon : rayon_set) {
					rayons_aggregator.append(rayon+";");
				}
				String all_rayons =rayons_aggregator.toString();
				try {
					PreparedStatement ps = con.prepareStatement(insert_statement);
					ps.setString(1, this.magasin);
					ps.setString(2, content);
					ps.setString(3, all_rayons);
					ps.setInt(4, nb_exact_urls);
					ps.setString(5, duplicates_urls);
					java.sql.Date sqlDate = new java.sql.Date(System.currentTimeMillis());
					ps.setDate(6,sqlDate);
					ps.executeUpdate();
				} catch (SQLException e) {
					System.out.println("Trouble inserting "+this.magasin);
					e.printStackTrace();
				}
			}
		}	
	}

	private String getFileDoublons(RayonComparison comp){
		List<RayonLevelDoublon>  doublon_list = comp.getDoublons();
		StringBuilder urls = new StringBuilder();
		for (RayonLevelDoublon doublon : doublon_list){
			urls.append(doublon.getURL1()+";"+doublon.getURL2()+"\n");
		}
		return  urls.toString();
	}
}
