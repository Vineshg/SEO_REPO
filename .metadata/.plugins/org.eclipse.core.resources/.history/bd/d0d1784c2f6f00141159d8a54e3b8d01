package dupli.titles;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;

public class TitleCrawler {
	// we here just want to get every URL from the input file and get if the SKU is sold by market place/cdiscount and so on

	private static List<LineItem> items = new ArrayList<LineItem>();


	public static void main(String[] args)  {
		String fileName="/home/sduprey/My_Data/My_GWT_Extracts/My_Title_To_Fetch/title_to_fetch.csv";
		String outputPathFileName = "/home/sduprey/My_Data/My_Outgoing_Data/My_Title_MP_Extract/results_title_to_fetch.csv";
		try{
			parsing_file(fileName);
		} catch (IOException e){
			e.printStackTrace();
		}
		make_your_job();
		try {
			print_results(outputPathFileName);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			System.out.println("Trouble saving result flat file : "+outputPathFileName);
			e.printStackTrace();
		}
	}

	private static void print_results(String outputPathFileName) throws IOException{
//		BufferedWriter writer = null;
//		// we open the file
//		writer=  new BufferedWriter(new OutputStreamWriter(new FileOutputStream(outputPathFileName), "UTF-8"));	
//		// we write the header
//		//writer.write("DOC;MODE;NODEID;NODELABEL;NODE_POSITION;OCCURENCE;PART_ONE;PART_TWO\n");
//		writer.write("DOC;MODE;NODEID;NODELABEL;NODE_POSITION;OCCURENCE\n");
//		// we open the database
//		//		for (LineItem baditem : bad_items){
//		//			writer.write(baditem.getDocument()+baditem.getMode()+baditem.getNodeId()+baditem.getNodeLable()+baditem.getNodePosition()+baditem.getOccurences()+"\n");
//		//		}
//		writer.close();
	}

	private static void make_your_job(){
		for (LineItem item : items){
			List<DiscriminedURL> urls_to_fetch = item.getUrls();
			for (DiscriminedURL url : urls_to_fetch){
				try {
					System.out.println("Fetching url : "+url);
					String type =fetch_url(url.getUrl());
					url.setOffer(type);
					System.out.println("Type : "+type);
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
					System.out.println("Trouble fetching URL : "+url);
				}
			}
		}
	}

	private static String fetch_url(String my_url_to_fetch) throws IOException{
		URL page = new URL(my_url_to_fetch);
		HttpURLConnection conn = (HttpURLConnection) page.openConnection();
		conn.connect();
		InputStreamReader in = new InputStreamReader((InputStream) conn.getContent());
		BufferedReader buff = new BufferedReader(in);
		String line;
		StringBuilder contentbuilder = new StringBuilder();
		do {
			line = buff.readLine();
			contentbuilder.append(line);
		} while (line != null);
		int cdiscount_index = contentbuilder.toString().indexOf("<p class='fpSellBy'>Vendu et expédié par <span class='logoCDS'>");
		if (cdiscount_index >0){
			return "Cdiscount";

		}else{
			return "Market Place";
		}
	}

	private static void parsing_file(String fileName) throws IOException{
		BufferedReader br = new BufferedReader(new FileReader(fileName));
		String header = br.readLine();
		System.out.println(header);
		String line="";
		while ((line = br.readLine()) != null) {
			String[] pieces=line.split(";");
			LineItem item = new LineItem();
			List<DiscriminedURL> url_to_fetch = new ArrayList<DiscriminedURL>();

			for (int i=0;i<pieces.length;i++){
				if (i==0){
					item.setTitle(pieces[i]);
				} else {
					DiscriminedURL url = new DiscriminedURL();
					url.setUrl(pieces[i]);
					url_to_fetch.add(url);
				}
			}
			item.setUrls(url_to_fetch);
			items.add(item);
		}
	}

	static class LineItem {
		private String title;
		private List<DiscriminedURL> urls;

		public String getTitle() {
			return title;
		}

		public void setTitle(String title) {
			this.title = title;
		}

		public List<DiscriminedURL> getUrls() {
			return urls;
		}

		public void setUrls(List<DiscriminedURL> urls) {
			this.urls = urls;
		}

	}

	static class DiscriminedURL {
		String url;
		String offer = "Unknown";
		public String getUrl() {
			return url;
		}
		public void setUrl(String url) {
			this.url = url;
		}
		public String getOffer() {
			return offer;
		}
		public void setOffer(String offer) {
			this.offer = offer;
		}
	}

}