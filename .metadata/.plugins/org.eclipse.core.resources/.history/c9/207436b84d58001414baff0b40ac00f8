package vsm;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

public class InsideMagasinBetweenRayonWorkerThread implements Runnable {
	private String magasin;
	private Map<String,List<URLContentInfo>> rayons_datas = new HashMap<String,List<URLContentInfo>>();
	private List<String> rayons;
	private String field_to_fetch;
	private Connection con;
	//private ArrayList<URLContentInfo> my_infos = new ArrayList<URLContentInfo>();
//	private double total_sum=0;
//	private double total_exact_number=0;

	public InsideMagasinBetweenRayonWorkerThread(Connection con, String magasin,List<String> rayons, String field_to_fetch) throws SQLException{
		this.magasin=magasin;
		this.rayons=rayons;
		this.field_to_fetch=field_to_fetch;
		System.out.println("Computing metrics for field : "+ this.field_to_fetch +" and for "+magasin +" :"+ this.magasin);
		this.con = con;
		for (String rayon : rayons){
			System.out.println("Getting content from rayon :"+rayon);
			List<URLContentInfo> info_list = rayons_datas.get(rayon);
			if (info_list==null){
				info_list=new ArrayList<URLContentInfo>();
				rayons_datas.put(rayon,info_list);
			}	
			// getting the URLs infos for each rayon
			PreparedStatement field_pst;
			try {
				field_pst  = this.con.prepareStatement("SELECT "+this.field_to_fetch+" , URL, VENDOR, MAGASIN, RAYON, PRODUIT FROM CRAWL_RESULTS WHERE RAYON='" +rayon+ "'");
				ResultSet field_rs = field_pst.executeQuery();
				while (field_rs.next()) {
					URLContentInfo url_info = new URLContentInfo();
					String content = field_rs.getString(1);
					String my_url = field_rs.getString(2);
					String my_vendor = field_rs.getString(3);
					String my_magasin = field_rs.getString(4);
					String my_rayon = field_rs.getString(5);
					String my_produit = field_rs.getString(6);
					url_info.setContent(content);
					url_info.setUrl(my_url);
					url_info.setMagasin(my_magasin);
					url_info.setRayon(my_rayon);
					url_info.setProduit(my_produit);
					url_info.setVendor(my_vendor);
					info_list.add(url_info);
				}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				System.out.println("Database trouble with the rayon :"+rayon);
				e.printStackTrace();
			}
		}
	}

	public void run() {
		for (String rayon1 : rayons){
			for (String rayon2 : rayons){
				System.out.println("Computing similarity metrics for rayons : "+ rayon1 + " and "+ rayon2);
				buildComparisonMatrix(rayon1,rayon2);
			}	
		}
		//saveResults();
		System.out.println(Thread.currentThread().getName()+" End");
	}

	private void buildComparisonMatrix(String rayoni, String rayonj){
		List<String> fields_i = rayons_url.get(rayoni);
		List<String> fields_j = rayons_url.get(rayonj);

		cross_lists(fields_i,fields_j);

		//		System.out.println("Total sum : "+total_sum);
		//		System.out.println("Total number of comparisons : "+(nb_contents*(nb_contents+1)/2-nb_contents));
		//		System.out.println("OVerall average VSM BOW similarity : "+total_sum/(nb_contents*(nb_contents+1)/2-nb_contents));
		//
		//		System.out.println("Total exact sum : "+total_exact_number);
		//		System.out.println("Total number of comparisons : "+(nb_contents*(nb_contents+1)/2-nb_contents));
		//		System.out.println("OVerall average VSM BOW similarity : "+total_exact_number/(nb_contents*(nb_contents+1)/2-nb_contents));

	}
	private void cross_lists(List<String> fields_i,List<String> fields_j){
		int total_exact_number=0;
		double total_sum = 0;
		for (int k=0;k<fields_i.size();k++){
			String contentk = fields_i.get(k);
			for (int l=0;l<fields_j.size();l++){
				String contentl = fields_j.get(k);
				double similarity = 0;
				boolean isexactlysimilar = contentk.equals(contentl);
				if ("".equals(contentk) || "".equals(contentl)){
					if (isexactlysimilar){
						similarity=1;
					}
				} else {
					similarity = computeSimilarity(contentk,contentl);
				}
				if (isexactlysimilar){
					total_exact_number++;
				}
				total_sum=total_sum+similarity;
				System.out.println("Similarity" + similarity);
			}
		}
	}

	private Double computeSimilarity(String text1, String text2) {
		VectorStateSpringRepresentation vs1 =new VectorStateSpringRepresentation(text1);
		VectorStateSpringRepresentation vs2 =new VectorStateSpringRepresentation(text2);
		return cosine_similarity(vs1.getWordFrequencies() , vs2.getWordFrequencies());
	}

	private double cosine_similarity(Map<String, Integer> v1, Map<String, Integer> v2) {
		Set<String> both = new HashSet<String>(v1.keySet());
		both.retainAll(v2.keySet());
		double sclar = 0, norm1 = 0, norm2 = 0;
		for (String k : both) sclar += v1.get(k) * v2.get(k);
		for (String k : v1.keySet()) norm1 += v1.get(k) * v1.get(k);
		for (String k : v2.keySet()) norm2 += v2.get(k) * v2.get(k);
		return sclar / Math.sqrt(norm1 * norm2);
	}



}
