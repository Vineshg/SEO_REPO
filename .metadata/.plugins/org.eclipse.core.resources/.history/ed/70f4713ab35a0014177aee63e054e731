package vsm;

import java.io.File;
import java.io.FileReader;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.StringTokenizer;


public class ProcessOneMagasinQualityScore {
	
	private static String config_path = "/home/sduprey/My_Code/My_Java_Workspace/SIMILARITY_METRICS/config/";
	public static Properties properties;
	public  static File stop_words;

	// threshold above which we deem the content too much similar !!
	//	private static double threshold = 0;
	private static Connection con = null;
	private static List<URLContentInfo> magasins_datas = new ArrayList<URLContentInfo>();
    private static int global_number_products_with_arguments = 0;
	
	public static void main(String[] args) {
		String magasin_to_analyse ="musique-cd-dvd";
		if (args.length == 1){
			magasin_to_analyse = args[0];
		}
		loadProperties();
		// getting the french stop words 
		stop_words = new File(properties.getProperty("config.stop_words_path"));
		//magasin_to_filter=properties.getProperty("data.magasintofilter");
		String url = properties.getProperty("db.url");
		String user = properties.getProperty("db.user");
		String mdp = properties.getProperty("db.passwd");    
		// database variables
		try {
			con = DriverManager.getConnection(url, user, mdp);
			fetch_magasin_info(magasin_to_analyse);
			//fetch_rayon();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			System.out.println("Trouble with the database");
			System.exit(0);
		}
		analyse_magasin(magasin_to_analyse);
	}

	private static void analyse_magasin(String magasin_to_analyse){
		Map<String, Integer> rayon_argument_counting = new HashMap<String, Integer>();
		System.out.println("Assessing " +magasins_datas.size()  + " URLs" );
		for (URLContentInfo rayon_info : magasins_datas){
			String attributes_listing = rayon_info.getAttributes();
			String url = rayon_info.getUrl();
			String checkType = URL_Utilities.checkType(url);
			if ("FicheProduit".equals(checkType)){
				if (attributes_listing.contains("|||")){
					global_number_products_with_arguments++;
					//System.out.println(attributes_listing);
					List<String> arguments_list = parse_arguments(attributes_listing);
					for (String argument_string : arguments_list){
						
						Integer counter = rayon_argument_counting.get(argument_string);
						if (counter == null){
							counter = new Integer(1);
							rayon_argument_counting.put(argument_string,counter);
						} else {
							counter=counter+1;
							rayon_argument_counting.put(argument_string,counter);
						}
					}
				}
			}
		}
		// to do : save the results for the rayon
		savingDataArguments(rayon_argument_counting);
	}
	
	private static List<String> parse_arguments(String arguments_listing){
		List<String> output = new ArrayList<String>();
		StringTokenizer arguments_tokenizer = new StringTokenizer(arguments_listing,"@@");
		while(arguments_tokenizer.hasMoreTokens()){
			String argument_pair = arguments_tokenizer.nextToken();
			StringTokenizer pair_tokenizer = new StringTokenizer(argument_pair,"|||");
			String value = "";
			if(pair_tokenizer.hasMoreTokens()){
				value = pair_tokenizer.nextToken();
			}
			if(pair_tokenizer.hasMoreTokens()){
				String description = pair_tokenizer.nextToken();
				output.add(value);
				//we here know that the description is present, we just don't add it
				System.out.println("Adding here the value  : "+value+" and description : "+description);
			}
		}
		return output;
	}

	private static void savingDataArguments(Map<String, Integer> rayon_argument_counting ){
		System.out.println("Displaying attributs counting results \n");
		Iterator it = rayon_argument_counting.entrySet().iterator();
		while (it.hasNext()) {
			Map.Entry pairs = (Map.Entry)it.next();
			String argument_name=(String)pairs.getKey();
			Integer count = (Integer)pairs.getValue();
			System.out.println("Attribut name : " +argument_name);
			System.out.println("Filled percentage : " +((double)count)/((double)global_number_products_with_arguments)*100);
		}	
	}
	
	private static void fetch_magasin_info(String magasin_to_analyse){
		// getting the URLs infos for each rayon
		PreparedStatement field_pst;
		try {
			field_pst  = con.prepareStatement("SELECT NB_ATTRIBUTES,ATTRIBUTES,URL,VENDOR,MAGASIN,RAYON,PRODUIT FROM CRAWL_RESULTS WHERE MAGASIN='" +magasin_to_analyse+ "'");
			ResultSet field_rs = field_pst.executeQuery();
			while (field_rs.next()) {
				URLContentInfo url_info = new URLContentInfo();
				int nb_attributes = field_rs.getInt(1);
				String attributes = field_rs.getString(2);
				String my_url = field_rs.getString(3);
				String my_vendor = field_rs.getString(4);
				String my_magasin = field_rs.getString(5);
				String my_rayon = field_rs.getString(6);
				String my_produit = field_rs.getString(7);
				url_info.setNb_attributes(nb_attributes);
				url_info.setAttributes(attributes);
				url_info.setUrl(my_url);
				url_info.setMagasin(my_magasin);
				url_info.setRayon(my_rayon);
				url_info.setProduit(my_produit);
				url_info.setVendor(my_vendor);
				magasins_datas.add(url_info);
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			System.out.println("Database trouble with the magasin :"+magasin_to_analyse);
			e.printStackTrace();
		}
	}

	private static void loadProperties(){
		properties = new Properties();
		try {
			properties.load(new FileReader(new File(config_path+"properties")));
		} catch (Exception e) {
			System.out.println("Failed to load properties file!!");
			e.printStackTrace();
		}
	}

	public String getProperty(String key){
		return properties.getProperty(key);
	}
	public Properties getProperties(){
		return properties;
	}
}